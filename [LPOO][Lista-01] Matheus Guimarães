// Interface IFuncoesVeiculo
interface IFuncoesVeiculo {
    void abastecer();
    void acelerar(int velocidade);
}

// Classe abstrata Veiculo
abstract class Veiculo implements IFuncoesVeiculo {
    private String tipo;
    private boolean abastecido = false;
    private int velocidade = 0;

    // Construtor
    public Veiculo(String tipo) {
        this.tipo = tipo;
    }

    // Getter e Setter para tipo
    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    // Getter e Setter para abastecido
    public boolean isAbastecido() {
        return abastecido;
    }

    public void setAbastecido(boolean abastecido) {
        this.abastecido = abastecido;
    }

    // Getter e Setter para velocidade
    public int getVelocidade() {
        return velocidade;
    }

    public void setVelocidade(int velocidade) {
        this.velocidade = velocidade;
    }

    // Método para exibir o tipo
    public void exibirTipo() {
        System.out.println("Tipo: " + tipo);
    }

    // Implementação dos métodos da interface
    @Override
    public void abastecer() {
        this.abastecido = true;
    }

    @Override
    public void acelerar(int velocidade) {
        this.velocidade = velocidade;
    }

    // Método ligar
    public void ligar() {
        System.out.println("O veículo está ligado.");
    }
}

// Classe Carro
public class Carro extends Veiculo {
    private String marca;
    private String modelo;
    private int ano;

    // Construtor
    public Carro(String marca, String modelo, int ano) {
        super("Carro");
        this.marca = marca;
        this.modelo = modelo;
        this.ano = ano;
    }

    // Getters e Setters para marca, modelo e ano
    public String getMarca() {
        return marca;
    }

    public void setMarca(String marca) {
        this.marca = marca;
    }

    public String getModelo() {
        return modelo;
    }

    public void setModelo(String modelo) {
        this.modelo = modelo;
    }

    public int getAno() {
        return ano;
    }

    public void setAno(int ano) {
        this.ano = ano;
    }

    // Método para exibir informações
    public void exibirInformacoes() {
        System.out.println("Marca: " + marca);
        System.out.println("Modelo: " + modelo);
        System.out.println("Ano: " + ano);
        System.out.println("Abastecido: " + (isAbastecido() ? "Sim" : "Não"));
        System.out.println("Velocidade: " + getVelocidade() + " km/h");
    }

    // Método main
    public static void main(String[] args) {
        Carro carro = new Carro("Toyota", "Corolla", 2023);
        carro.exibirInformacoes();

        carro.abastecer();
        carro.acelerar(80);

        carro.exibirInformacoes();
    }
}

// Classe Moto
class Moto extends Veiculo {
    private int cilindradas;

    // Construtor
    public Moto(String tipo, int cilindradas) {
        super(tipo);
        this.cilindradas = cilindradas;
    }

    // Getter e Setter para cilindradas
    public int getCilindradas() {
        return cilindradas;
    }

    public void setCilindradas(int cilindradas) {
        this.cilindradas = cilindradas;
    }

    // Método ligar
    @Override
    public void ligar() {
        System.out.println("A moto está ligada.");
    }

    // Método main
    public static void main(String[] args) {
        Moto moto = new Moto("Esportiva", 600);
        moto.exibirTipo();
        System.out.println("Cilindradas: " + moto.getCilindradas());

        moto.abastecer();
        moto.acelerar(120);

        System.out.println("Abastecido: " + (moto.isAbastecido() ? "Sim" : "Não"));
        System.out.println("Velocidade: " + moto.getVelocidade() + " km/h");
    }
}
